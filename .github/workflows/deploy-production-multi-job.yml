name: Deploy Production (Multi-Job)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # Job 1: Build and Package
  build-and-package:
    runs-on: ubuntu-latest
    outputs:
      deployment-package: ${{ steps.package.outputs.package-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Install dependencies
        run: pnpm install

      - name: Build API
        run: |
          cd apps/api
          NODE_ENV=production pnpm run build

      - name: Build web app
        run: |
          cd apps/web
          NODE_ENV=production pnpm run build

      - name: Package deployment
        id: package
        run: |
          mkdir -p deployment-package
          
          # Copy API files
          cp -r apps/api/dist deployment-package/api-dist
          cp -r apps/api/migrations deployment-package/api-migrations
          
          # Modify API package.json to remove workspace dependency
          node -e "
            const pkg = JSON.parse(require('fs').readFileSync('apps/api/package.json', 'utf8'));
            delete pkg.dependencies['@whitepine/types'];
            require('fs').writeFileSync('deployment-package/api-package.json', JSON.stringify(pkg, null, 2));
          "
          
          cp pnpm-lock.yaml deployment-package/api-pnpm-lock.yaml
          cp apps/api/config/migrate-mongo-config.js deployment-package/migrate-mongo-config.js
          
          # Copy web app files
          cp -r apps/web/.next deployment-package/web-next
          cp -r apps/web/public deployment-package/web-public
        
          # Copy web app source directories (these are needed for NextAuth.js API routes and MDX content)
          echo "üìÅ Copying web app source directories..."
          echo "üîç Checking what directories exist in apps/web/:"
          ls -la apps/web/ | grep -E "^d.*app|^d.*lib|^d.*components|^d.*hooks|^d.*types|^d.*test|^d.*content" || echo "‚ö†Ô∏è No source directories found"
          
          [ -d "apps/web/app" ] && cp -r apps/web/app deployment-package/web-app && echo "‚úÖ Copied app directory"
          [ -d "apps/web/lib" ] && cp -r apps/web/lib deployment-package/web-lib && echo "‚úÖ Copied lib directory"
          [ -d "apps/web/components" ] && cp -r apps/web/components deployment-package/web-components && echo "‚úÖ Copied components directory"
          [ -d "apps/web/hooks" ] && cp -r apps/web/hooks deployment-package/web-hooks && echo "‚úÖ Copied hooks directory"
          [ -d "apps/web/types" ] && cp -r apps/web/types deployment-package/web-types && echo "‚úÖ Copied types directory"
          [ -d "apps/web/test" ] && cp -r apps/web/test deployment-package/web-test && echo "‚úÖ Copied test directory"
          [ -d "apps/web/content" ] && cp -r apps/web/content deployment-package/web-content && echo "‚úÖ Copied content directory"
          
          # Copy web app configuration files
          # Modify web package.json to remove workspace dependency
          node -e "
            const pkg = JSON.parse(require('fs').readFileSync('apps/web/package.json', 'utf8'));
            delete pkg.dependencies['@whitepine/types'];
            require('fs').writeFileSync('deployment-package/web-package.json', JSON.stringify(pkg, null, 2));
          "
          [ -f "apps/web/next.config.js" ] && cp apps/web/next.config.js deployment-package/web-next.config.js
          [ -f "apps/web/tsconfig.json" ] && cp apps/web/tsconfig.json deployment-package/web-tsconfig.json
          [ -f "apps/web/vitest.config.ts" ] && cp apps/web/vitest.config.ts deployment-package/web-vitest.config.ts
          [ -f "apps/web/middleware.ts" ] && cp apps/web/middleware.ts deployment-package/web-middleware.ts
          cp pnpm-lock.yaml deployment-package/web-pnpm-lock.yaml
          
          # Show what was actually copied to deployment package
          echo "üì¶ Deployment package contents:"
          ls -la deployment-package/ | grep web
          
          # Copy packages
          cp -r packages deployment-package/packages
          
          # Copy ops
          cp -r apps/ops deployment-package/ops
          
          # Copy deployment script
          cp .github/workflows/deploy-script.sh deployment-package/deploy-script.sh
          
          echo "package-path=deployment-package" >> $GITHUB_OUTPUT

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package/

  # Job 2: Upload to Server
  upload-to-server:
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: deployment-package/

      - name: Verify artifact download
        run: |
          echo "üîç Verifying artifact download..."
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Deployment package contents:"
          ls -la deployment-package/ || echo "deployment-package directory not found"
          echo "Deploy script:"
          ls -la .github/workflows/deploy-script.sh || echo "deploy-script.sh not found"

      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

          # Debug SSH key
          echo "üîç SSH key info:"
          ls -la /tmp/ssh_key
          echo "üîç SSH key first 50 chars:"
          head -c 50 /tmp/ssh_key
          echo ""
          echo "üîç SSH key last 50 chars:"
          tail -c 50 /tmp/ssh_key
          echo ""

      - name: Test SSH connection
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîç Testing SSH connection..."
            echo "SSH connection successful"
            
            echo "üìÅ Creating deployment directory..."
            mkdir -p /tmp/deployment
            echo "‚úÖ Deployment directory created"
            
            echo "üì¶ Preparing for file upload..."
            ls -la /tmp/deployment

      - name: Upload deployment files
        run: |
          # Debug: Check what files are available
          echo "üîç Current directory contents:"
          ls -la
          echo "üîç Deployment package contents:"
          ls -la deployment-package/ || echo "deployment-package directory not found"
          
          # Check if files are in current directory instead
          echo "üîç Checking for individual files in current directory:"
          ls -la api-* web-* migrate-mongo-config.js || echo "Individual files not found in current directory"
          
          # Recreate SSH key for this step
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          echo "üì¶ Uploading deployment files..."
          
          # Try to upload from deployment-package directory first
          if [ -d "deployment-package" ]; then
            echo "üìÅ Uploading from deployment-package directory..."
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key -r deployment-package/* ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
            echo "‚úÖ Deployment package uploaded from directory"
          else
            echo "üìÅ deployment-package directory not found, trying individual files..."
            
            # Upload individual files if they're in the current directory
            if [ -d "api-dist" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key -r api-dist ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ API dist uploaded"
            fi
            
            if [ -d "api-migrations" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key -r api-migrations ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ API migrations uploaded"
            fi
            
            if [ -f "api-package.json" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key api-package.json ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ API package.json uploaded"
            fi
            
            if [ -f "api-pnpm-lock.yaml" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key api-pnpm-lock.yaml ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ API pnpm-lock.yaml uploaded"
            fi
            
            if [ -d "web-next" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key -r web-next ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ Web .next uploaded"
            fi
            
            if [ -d "web-public" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key -r web-public ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ Web public uploaded"
            fi
            
            if [ -f "web-package.json" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key web-package.json ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ Web package.json uploaded"
            fi
            
            if [ -f "web-pnpm-lock.yaml" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key web-pnpm-lock.yaml ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ Web pnpm-lock.yaml uploaded"
            fi
            
            if [ -f "migrate-mongo-config.js" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key migrate-mongo-config.js ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ migrate-mongo-config.js uploaded"
            fi
            
            if [ -d "packages" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key -r packages ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ packages uploaded"
            fi
            
            if [ -d "ops" ]; then
              scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key -r ops ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/
              echo "‚úÖ ops uploaded"
            fi
          fi
          
          echo "üìú Uploading deployment script..."
          if [ -f "deployment-package/deploy-script.sh" ]; then
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key deployment-package/deploy-script.sh ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/deploy.sh
            echo "‚úÖ Deployment script uploaded from deployment-package/"
          elif [ -f "deploy-script.sh" ]; then
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key deploy-script.sh ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/deploy.sh
            echo "‚úÖ Deployment script uploaded"
          elif [ -f ".github/workflows/deploy-script.sh" ]; then
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i /tmp/ssh_key .github/workflows/deploy-script.sh ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/tmp/deployment/deploy.sh
            echo "‚úÖ Deployment script uploaded from .github/workflows/"
          else
            echo "‚ùå deploy-script.sh not found in deployment-package/, current directory, or .github/workflows/"
            exit 1
          fi
          
          echo "‚úÖ File upload completed"
          
          # Clean up
          rm -f /tmp/ssh_key

  # Job 3: Deploy on Server
  deploy-on-server:
    needs: upload-to-server
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Execute deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîç Starting deployment execution..."
            echo "üìÅ Current directory: $(pwd)"
            echo "üìÅ Contents of /tmp/deployment:"
            ls -la /tmp/deployment/ || echo "‚ùå /tmp/deployment not found"
            
            # Set environment variables from GitHub secrets
            export MONGODB_URI_PROD="${{ secrets.MONGODB_URI_PROD }}"
            export MONGODB_URI_DEV="${{ secrets.MONGODB_URI_DEV }}"
            export SESSION_SECRET="${{ secrets.SESSION_SECRET }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            export S3_BUCKET="${{ secrets.S3_BUCKET }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            
            echo "üîß Environment variables set"
            echo "üì¶ Checking deployment files..."
            
            # Check if deployment script exists
            if [ -f "/tmp/deployment/deploy.sh" ]; then
              echo "‚úÖ Deployment script found"
              ls -la /tmp/deployment/deploy.sh
            else
              echo "‚ùå Deployment script not found"
              echo "üìÅ Available files in /tmp/deployment:"
              ls -la /tmp/deployment/ || echo "‚ùå /tmp/deployment directory not accessible"
              exit 1
            fi
            
            # Run deployment script
            echo "üöÄ Executing deployment script..."
            cd /tmp/deployment
            chmod +x deploy.sh
            echo "üìã Script permissions set"
            echo "üöÄ Starting deployment script execution..."
            ./deploy.sh

  # Job 4: Verify Deployment
  verify-deployment:
    needs: deploy-on-server
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üìä PM2 Status:"
            pm2 status
            
            echo "üîß Ensuring NGINX is running..."
            if ! systemctl is-active --quiet nginx; then
              echo "üîß NGINX is not running, starting it..."
              sudo systemctl start nginx || echo "Could not start NGINX"
              sleep 5
            else
              echo "‚úÖ NGINX is already running"
            fi
            
            echo "üåê Testing endpoints:"
            echo "üîç Testing web app..."
            if curl -s "https://whitepine.jpkramer.com/" > /dev/null; then
              echo "‚úÖ Web app is responding"
            else
              echo "‚ùå Web app is not responding"
              echo "üîç Checking local web app..."
              if curl -s "http://localhost:3002/" > /dev/null; then
                echo "‚úÖ Local web app is responding on port 3002"
              else
                echo "‚ùå Local web app is not responding on port 3002"
              fi
            fi
            
            echo "üîç Testing API..."
            if curl -s "https://whitepine.jpkramer.com/health" > /dev/null; then
              echo "‚úÖ API is responding"
            else
              echo "‚ùå API is not responding"
              echo "üîç Checking local API..."
              if curl -s "http://localhost:4000/health" > /dev/null; then
                echo "‚úÖ Local API is responding on port 4000"
                echo "üîç API response:"
                curl -s "http://localhost:4000/health" | head -3
              else
                echo "‚ùå Local API is not responding on port 4000"
                echo "üîç Checking API process status..."
                pm2 logs api-prod --lines 3 --err 2>/dev/null | tail -3 || echo "Could not get API logs"
              fi
            fi

      - name: Clean up SSH key
        if: always()
        run: rm -f /tmp/ssh_key
